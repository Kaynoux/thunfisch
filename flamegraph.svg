<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="13430"><g><title>libsystem_malloc.dylib`_free (4 samples, 0.03%)</title><rect x="0.0447%" y="197" width="0.0298%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="4"/><text x="0.2947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="0.0745%" y="197" width="0.0149%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="2"/><text x="0.3245%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.04%)</title><rect x="0.0894%" y="197" width="0.0447%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="6"/><text x="0.3394%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="0.1340%" y="197" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="2"/><text x="0.3840%" y="207.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc13___rdl_dealloc (3 samples, 0.02%)</title><rect x="0.1638%" y="197" width="0.0223%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="3"/><text x="0.4138%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1862%" y="197" width="0.0149%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="2"/><text x="0.4362%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.07%)</title><rect x="2.0923%" y="181" width="0.0670%" height="15" fill="rgb(207,160,47)" fg:x="281" fg:w="9"/><text x="2.3423%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.04%)</title><rect x="2.1593%" y="181" width="0.0447%" height="15" fill="rgb(228,23,34)" fg:x="290" fg:w="6"/><text x="2.4093%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (35 samples, 0.26%)</title><rect x="2.2115%" y="181" width="0.2606%" height="15" fill="rgb(218,30,26)" fg:x="297" fg:w="35"/><text x="2.4615%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (2 samples, 0.01%)</title><rect x="2.4721%" y="181" width="0.0149%" height="15" fill="rgb(220,122,19)" fg:x="332" fg:w="2"/><text x="2.7221%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (3 samples, 0.02%)</title><rect x="2.4870%" y="181" width="0.0223%" height="15" fill="rgb(250,228,42)" fg:x="334" fg:w="3"/><text x="2.7370%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.06%)</title><rect x="2.8146%" y="165" width="0.0596%" height="15" fill="rgb(240,193,28)" fg:x="378" fg:w="8"/><text x="3.0646%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (1,266 samples, 9.43%)</title><rect x="5.3984%" y="149" width="9.4267%" height="15" fill="rgb(216,20,37)" fg:x="725" fg:w="1266"/><text x="5.6484%" y="159.50">rusty-chess-b..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (1,187 samples, 8.84%)</title><rect x="14.8250%" y="149" width="8.8384%" height="15" fill="rgb(206,188,39)" fg:x="1991" fg:w="1187"/><text x="15.0750%" y="159.50">rusty-chess-..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (724 samples, 5.39%)</title><rect x="23.6634%" y="149" width="5.3909%" height="15" fill="rgb(217,207,13)" fg:x="3178" fg:w="724"/><text x="23.9134%" y="159.50">rusty-c..</text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (8,749 samples, 65.15%)</title><rect x="2.8816%" y="165" width="65.1452%" height="15" fill="rgb(231,73,38)" fg:x="387" fg:w="8749"/><text x="3.1316%" y="175.50">rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}}</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (5,234 samples, 38.97%)</title><rect x="29.0544%" y="149" width="38.9724%" height="15" fill="rgb(225,20,46)" fg:x="3902" fg:w="5234"/><text x="29.3044%" y="159.50">rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::g..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (42 samples, 0.31%)</title><rect x="68.0268%" y="165" width="0.3127%" height="15" fill="rgb(210,31,41)" fg:x="9136" fg:w="42"/><text x="68.2768%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (27 samples, 0.20%)</title><rect x="68.3395%" y="165" width="0.2010%" height="15" fill="rgb(221,200,47)" fg:x="9178" fg:w="27"/><text x="68.5895%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (18 samples, 0.13%)</title><rect x="68.5406%" y="165" width="0.1340%" height="15" fill="rgb(226,26,5)" fg:x="9205" fg:w="18"/><text x="68.7906%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (163 samples, 1.21%)</title><rect x="68.6746%" y="165" width="1.2137%" height="15" fill="rgb(249,33,26)" fg:x="9223" fg:w="163"/><text x="68.9246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.07%)</title><rect x="73.9092%" y="133" width="0.0670%" height="15" fill="rgb(235,183,28)" fg:x="9926" fg:w="9"/><text x="74.1592%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="73.9762%" y="133" width="0.0149%" height="15" fill="rgb(221,5,38)" fg:x="9935" fg:w="2"/><text x="74.2262%" y="143.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$realloc (6 samples, 0.04%)</title><rect x="73.9985%" y="133" width="0.0447%" height="15" fill="rgb(247,18,42)" fg:x="9938" fg:w="6"/><text x="74.2485%" y="143.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc11___rdl_alloc (2 samples, 0.01%)</title><rect x="74.0432%" y="133" width="0.0149%" height="15" fill="rgb(241,131,45)" fg:x="9944" fg:w="2"/><text x="74.2932%" y="143.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc13___rdl_realloc (3 samples, 0.02%)</title><rect x="74.0581%" y="133" width="0.0223%" height="15" fill="rgb(249,31,29)" fg:x="9946" fg:w="3"/><text x="74.3081%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.01%)</title><rect x="74.1028%" y="117" width="0.0149%" height="15" fill="rgb(225,111,53)" fg:x="9952" fg:w="2"/><text x="74.3528%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="74.4602%" y="85" width="0.0149%" height="15" fill="rgb(238,160,17)" fg:x="10000" fg:w="2"/><text x="74.7102%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="74.4751%" y="85" width="0.0149%" height="15" fill="rgb(214,148,48)" fg:x="10002" fg:w="2"/><text x="74.7251%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.08%)</title><rect x="74.4899%" y="85" width="0.0819%" height="15" fill="rgb(232,36,49)" fg:x="10004" fg:w="11"/><text x="74.7399%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.13%)</title><rect x="74.6240%" y="69" width="0.1340%" height="15" fill="rgb(209,103,24)" fg:x="10022" fg:w="18"/><text x="74.8740%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="74.7580%" y="69" width="0.0372%" height="15" fill="rgb(229,88,8)" fg:x="10040" fg:w="5"/><text x="75.0080%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.01%)</title><rect x="74.8027%" y="53" width="0.0149%" height="15" fill="rgb(213,181,19)" fg:x="10046" fg:w="2"/><text x="75.0527%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.01%)</title><rect x="74.8325%" y="37" width="0.0149%" height="15" fill="rgb(254,191,54)" fg:x="10050" fg:w="2"/><text x="75.0825%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.08%)</title><rect x="74.7952%" y="69" width="0.0819%" height="15" fill="rgb(241,83,37)" fg:x="10045" fg:w="11"/><text x="75.0452%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.05%)</title><rect x="74.8250%" y="53" width="0.0521%" height="15" fill="rgb(233,36,39)" fg:x="10049" fg:w="7"/><text x="75.0750%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.03%)</title><rect x="74.8474%" y="37" width="0.0298%" height="15" fill="rgb(226,3,54)" fg:x="10052" fg:w="4"/><text x="75.0974%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.03%)</title><rect x="74.8771%" y="69" width="0.0298%" height="15" fill="rgb(245,192,40)" fg:x="10056" fg:w="4"/><text x="75.1271%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (47 samples, 0.35%)</title><rect x="74.5719%" y="85" width="0.3500%" height="15" fill="rgb(238,167,29)" fg:x="10015" fg:w="47"/><text x="74.8219%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="74.9069%" y="69" width="0.0149%" height="15" fill="rgb(232,182,51)" fg:x="10060" fg:w="2"/><text x="75.1569%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (5 samples, 0.04%)</title><rect x="74.9218%" y="85" width="0.0372%" height="15" fill="rgb(231,60,39)" fg:x="10062" fg:w="5"/><text x="75.1718%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="75.0707%" y="69" width="0.0149%" height="15" fill="rgb(208,69,12)" fg:x="10082" fg:w="2"/><text x="75.3207%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.09%)</title><rect x="75.3313%" y="37" width="0.0894%" height="15" fill="rgb(235,93,37)" fg:x="10117" fg:w="12"/><text x="75.5813%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.36%)</title><rect x="75.0931%" y="69" width="0.3574%" height="15" fill="rgb(213,116,39)" fg:x="10085" fg:w="48"/><text x="75.3431%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (35 samples, 0.26%)</title><rect x="75.1899%" y="53" width="0.2606%" height="15" fill="rgb(222,207,29)" fg:x="10098" fg:w="35"/><text x="75.4399%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="75.4207%" y="37" width="0.0298%" height="15" fill="rgb(206,96,30)" fg:x="10129" fg:w="4"/><text x="75.6707%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.04%)</title><rect x="75.4505%" y="69" width="0.0372%" height="15" fill="rgb(218,138,4)" fg:x="10133" fg:w="5"/><text x="75.7005%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.04%)</title><rect x="75.4877%" y="69" width="0.0372%" height="15" fill="rgb(250,191,14)" fg:x="10138" fg:w="5"/><text x="75.7377%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.02%)</title><rect x="75.5398%" y="53" width="0.0223%" height="15" fill="rgb(239,60,40)" fg:x="10145" fg:w="3"/><text x="75.7898%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.05%)</title><rect x="75.5249%" y="69" width="0.0521%" height="15" fill="rgb(206,27,48)" fg:x="10143" fg:w="7"/><text x="75.7749%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="75.5622%" y="53" width="0.0149%" height="15" fill="rgb(225,35,8)" fg:x="10148" fg:w="2"/><text x="75.8122%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.13%)</title><rect x="75.5771%" y="69" width="0.1266%" height="15" fill="rgb(250,213,24)" fg:x="10150" fg:w="17"/><text x="75.8271%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.11%)</title><rect x="75.5920%" y="53" width="0.1117%" height="15" fill="rgb(247,123,22)" fg:x="10152" fg:w="15"/><text x="75.8420%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="75.7036%" y="69" width="0.0149%" height="15" fill="rgb(231,138,38)" fg:x="10167" fg:w="2"/><text x="75.9536%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.02%)</title><rect x="75.8377%" y="53" width="0.0223%" height="15" fill="rgb(231,145,46)" fg:x="10185" fg:w="3"/><text x="76.0877%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.05%)</title><rect x="75.8600%" y="53" width="0.0521%" height="15" fill="rgb(251,118,11)" fg:x="10188" fg:w="7"/><text x="76.1100%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (31 samples, 0.23%)</title><rect x="75.7185%" y="69" width="0.2308%" height="15" fill="rgb(217,147,25)" fg:x="10169" fg:w="31"/><text x="75.9685%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.04%)</title><rect x="75.9121%" y="53" width="0.0372%" height="15" fill="rgb(247,81,37)" fg:x="10195" fg:w="5"/><text x="76.1621%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (139 samples, 1.03%)</title><rect x="74.9665%" y="85" width="1.0350%" height="15" fill="rgb(209,12,38)" fg:x="10068" fg:w="139"/><text x="75.2165%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.05%)</title><rect x="75.9494%" y="69" width="0.0521%" height="15" fill="rgb(227,1,9)" fg:x="10200" fg:w="7"/><text x="76.1994%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (259 samples, 1.93%)</title><rect x="74.2964%" y="101" width="1.9285%" height="15" fill="rgb(248,47,43)" fg:x="9978" fg:w="259"/><text x="74.5464%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.21%)</title><rect x="76.0164%" y="85" width="0.2085%" height="15" fill="rgb(221,10,30)" fg:x="10209" fg:w="28"/><text x="76.2664%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.01%)</title><rect x="76.2249%" y="101" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="10237" fg:w="2"/><text x="76.4749%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.07%)</title><rect x="76.2398%" y="101" width="0.0745%" height="15" fill="rgb(222,148,37)" fg:x="10239" fg:w="10"/><text x="76.4898%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.07%)</title><rect x="76.3142%" y="101" width="0.0745%" height="15" fill="rgb(234,67,33)" fg:x="10249" fg:w="10"/><text x="76.5642%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (312 samples, 2.32%)</title><rect x="74.1176%" y="117" width="2.3232%" height="15" fill="rgb(247,98,35)" fg:x="9954" fg:w="312"/><text x="74.3676%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.05%)</title><rect x="76.3887%" y="101" width="0.0521%" height="15" fill="rgb(247,138,52)" fg:x="10259" fg:w="7"/><text x="76.6387%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.04%)</title><rect x="76.3961%" y="85" width="0.0447%" height="15" fill="rgb(213,79,30)" fg:x="10260" fg:w="6"/><text x="76.6461%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.04%)</title><rect x="76.4408%" y="117" width="0.0372%" height="15" fill="rgb(246,177,23)" fg:x="10266" fg:w="5"/><text x="76.6908%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="76.4780%" y="117" width="0.0447%" height="15" fill="rgb(230,62,27)" fg:x="10271" fg:w="6"/><text x="76.7280%" y="127.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (368 samples, 2.74%)</title><rect x="73.8049%" y="149" width="2.7401%" height="15" fill="rgb(216,154,8)" fg:x="9912" fg:w="368"/><text x="74.0549%" y="159.50">ru..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (331 samples, 2.46%)</title><rect x="74.0804%" y="133" width="2.4646%" height="15" fill="rgb(244,35,45)" fg:x="9949" fg:w="331"/><text x="74.3304%" y="143.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="76.5227%" y="117" width="0.0223%" height="15" fill="rgb(251,115,12)" fg:x="10277" fg:w="3"/><text x="76.7727%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="76.6716%" y="85" width="0.0223%" height="15" fill="rgb(240,54,50)" fg:x="10297" fg:w="3"/><text x="76.9216%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="76.7089%" y="53" width="0.0149%" height="15" fill="rgb(233,84,52)" fg:x="10302" fg:w="2"/><text x="76.9589%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.01%)</title><rect x="76.7684%" y="37" width="0.0149%" height="15" fill="rgb(207,117,47)" fg:x="10310" fg:w="2"/><text x="77.0184%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (19 samples, 0.14%)</title><rect x="76.6940%" y="85" width="0.1415%" height="15" fill="rgb(249,43,39)" fg:x="10300" fg:w="19"/><text x="76.9440%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.13%)</title><rect x="76.7014%" y="69" width="0.1340%" height="15" fill="rgb(209,38,44)" fg:x="10301" fg:w="18"/><text x="76.9514%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.11%)</title><rect x="76.7238%" y="53" width="0.1117%" height="15" fill="rgb(236,212,23)" fg:x="10304" fg:w="15"/><text x="76.9738%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="76.7833%" y="37" width="0.0521%" height="15" fill="rgb(242,79,21)" fg:x="10312" fg:w="7"/><text x="77.0333%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.04%)</title><rect x="76.8354%" y="85" width="0.0372%" height="15" fill="rgb(211,96,35)" fg:x="10319" fg:w="5"/><text x="77.0854%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.02%)</title><rect x="76.8503%" y="69" width="0.0223%" height="15" fill="rgb(253,215,40)" fg:x="10321" fg:w="3"/><text x="77.1003%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (32 samples, 0.24%)</title><rect x="76.6418%" y="101" width="0.2383%" height="15" fill="rgb(211,81,21)" fg:x="10293" fg:w="32"/><text x="76.8918%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (38 samples, 0.28%)</title><rect x="76.6195%" y="117" width="0.2829%" height="15" fill="rgb(208,190,38)" fg:x="10290" fg:w="38"/><text x="76.8695%" y="127.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (51 samples, 0.38%)</title><rect x="76.5450%" y="149" width="0.3797%" height="15" fill="rgb(235,213,38)" fg:x="10280" fg:w="51"/><text x="76.7950%" y="159.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (43 samples, 0.32%)</title><rect x="76.6046%" y="133" width="0.3202%" height="15" fill="rgb(237,122,38)" fg:x="10288" fg:w="43"/><text x="76.8546%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="76.9025%" y="117" width="0.0223%" height="15" fill="rgb(244,218,35)" fg:x="10328" fg:w="3"/><text x="77.1525%" y="127.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (949 samples, 7.07%)</title><rect x="69.8883%" y="165" width="7.0663%" height="15" fill="rgb(240,68,47)" fg:x="9386" fg:w="949"/><text x="70.1383%" y="175.50">rusty-che..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="76.9248%" y="149" width="0.0298%" height="15" fill="rgb(210,16,53)" fg:x="10331" fg:w="4"/><text x="77.1748%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (11,761 samples, 87.57%)</title><rect x="0.2010%" y="197" width="87.5726%" height="15" fill="rgb(235,124,12)" fg:x="27" fg:w="11761"/><text x="0.4510%" y="207.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (11,451 samples, 85.26%)</title><rect x="2.5093%" y="181" width="85.2643%" height="15" fill="rgb(224,169,11)" fg:x="337" fg:w="11451"/><text x="2.7593%" y="191.50">rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (1,453 samples, 10.82%)</title><rect x="76.9546%" y="165" width="10.8191%" height="15" fill="rgb(250,166,2)" fg:x="10335" fg:w="1453"/><text x="77.2046%" y="175.50">rusty-chess-bot`..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (73 samples, 0.54%)</title><rect x="87.9375%" y="165" width="0.5436%" height="15" fill="rgb(242,216,29)" fg:x="11810" fg:w="73"/><text x="88.1875%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (77 samples, 0.57%)</title><rect x="88.4810%" y="165" width="0.5733%" height="15" fill="rgb(230,116,27)" fg:x="11883" fg:w="77"/><text x="88.7310%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (52 samples, 0.39%)</title><rect x="89.0544%" y="165" width="0.3872%" height="15" fill="rgb(228,99,48)" fg:x="11960" fg:w="52"/><text x="89.3044%" y="175.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (357 samples, 2.66%)</title><rect x="87.8407%" y="181" width="2.6582%" height="15" fill="rgb(253,11,6)" fg:x="11797" fg:w="357"/><text x="88.0907%" y="191.50">ru..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (142 samples, 1.06%)</title><rect x="89.4415%" y="165" width="1.0573%" height="15" fill="rgb(247,143,39)" fg:x="12012" fg:w="142"/><text x="89.6915%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (4 samples, 0.03%)</title><rect x="90.4989%" y="181" width="0.0298%" height="15" fill="rgb(236,97,10)" fg:x="12154" fg:w="4"/><text x="90.7489%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (2 samples, 0.01%)</title><rect x="90.5361%" y="181" width="0.0149%" height="15" fill="rgb(233,208,19)" fg:x="12159" fg:w="2"/><text x="90.7861%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (4 samples, 0.03%)</title><rect x="90.5510%" y="181" width="0.0298%" height="15" fill="rgb(216,164,2)" fg:x="12161" fg:w="4"/><text x="90.8010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="90.7893%" y="149" width="0.0149%" height="15" fill="rgb(220,129,5)" fg:x="12193" fg:w="2"/><text x="91.0393%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.02%)</title><rect x="90.8116%" y="101" width="0.0223%" height="15" fill="rgb(242,17,10)" fg:x="12196" fg:w="3"/><text x="91.0616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="90.8191%" y="85" width="0.0149%" height="15" fill="rgb(242,107,0)" fg:x="12197" fg:w="2"/><text x="91.0691%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="90.8191%" y="69" width="0.0149%" height="15" fill="rgb(251,28,31)" fg:x="12197" fg:w="2"/><text x="91.0691%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="90.8414%" y="85" width="0.0298%" height="15" fill="rgb(233,223,10)" fg:x="12200" fg:w="4"/><text x="91.0914%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.02%)</title><rect x="90.8861%" y="85" width="0.0223%" height="15" fill="rgb(215,21,27)" fg:x="12206" fg:w="3"/><text x="91.1361%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (15 samples, 0.11%)</title><rect x="90.8042%" y="117" width="0.1117%" height="15" fill="rgb(232,23,21)" fg:x="12195" fg:w="15"/><text x="91.0542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.07%)</title><rect x="90.8414%" y="101" width="0.0745%" height="15" fill="rgb(244,5,23)" fg:x="12200" fg:w="10"/><text x="91.0914%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (17 samples, 0.13%)</title><rect x="90.8042%" y="133" width="0.1266%" height="15" fill="rgb(226,81,46)" fg:x="12195" fg:w="17"/><text x="91.0542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.01%)</title><rect x="90.9159%" y="117" width="0.0149%" height="15" fill="rgb(247,70,30)" fg:x="12210" fg:w="2"/><text x="91.1659%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.01%)</title><rect x="90.9308%" y="133" width="0.0149%" height="15" fill="rgb(212,68,19)" fg:x="12212" fg:w="2"/><text x="91.1808%" y="143.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (51 samples, 0.38%)</title><rect x="90.5808%" y="181" width="0.3797%" height="15" fill="rgb(240,187,13)" fg:x="12165" fg:w="51"/><text x="90.8308%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (24 samples, 0.18%)</title><rect x="90.7818%" y="165" width="0.1787%" height="15" fill="rgb(223,113,26)" fg:x="12192" fg:w="24"/><text x="91.0318%" y="175.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (21 samples, 0.16%)</title><rect x="90.8042%" y="149" width="0.1564%" height="15" fill="rgb(206,192,2)" fg:x="12195" fg:w="21"/><text x="91.0542%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="90.9456%" y="133" width="0.0149%" height="15" fill="rgb(241,108,4)" fg:x="12214" fg:w="2"/><text x="91.1956%" y="143.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (513 samples, 3.82%)</title><rect x="87.7736%" y="197" width="3.8198%" height="15" fill="rgb(247,173,49)" fg:x="11788" fg:w="513"/><text x="88.0236%" y="207.50">rust..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (85 samples, 0.63%)</title><rect x="90.9605%" y="181" width="0.6329%" height="15" fill="rgb(224,114,35)" fg:x="12216" fg:w="85"/><text x="91.2105%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (13,321 samples, 99.19%)</title><rect x="0.0074%" y="213" width="99.1884%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="13321"/><text x="0.2574%" y="223.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (1,021 samples, 7.60%)</title><rect x="91.5934%" y="197" width="7.6024%" height="15" fill="rgb(245,172,44)" fg:x="12301" fg:w="1021"/><text x="91.8434%" y="207.50">rusty-ches..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (3 samples, 0.02%)</title><rect x="99.1958%" y="181" width="0.0223%" height="15" fill="rgb(236,23,11)" fg:x="13322" fg:w="3"/><text x="99.4458%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (18 samples, 0.13%)</title><rect x="99.1958%" y="197" width="0.1340%" height="15" fill="rgb(205,117,38)" fg:x="13322" fg:w="18"/><text x="99.4458%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (13 samples, 0.10%)</title><rect x="99.2331%" y="181" width="0.0968%" height="15" fill="rgb(237,72,25)" fg:x="13327" fg:w="13"/><text x="99.4831%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (2 samples, 0.01%)</title><rect x="99.3299%" y="197" width="0.0149%" height="15" fill="rgb(244,70,9)" fg:x="13340" fg:w="2"/><text x="99.5799%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (3 samples, 0.02%)</title><rect x="99.3448%" y="197" width="0.0223%" height="15" fill="rgb(217,125,39)" fg:x="13342" fg:w="3"/><text x="99.5948%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (26 samples, 0.19%)</title><rect x="99.1958%" y="213" width="0.1936%" height="15" fill="rgb(235,36,10)" fg:x="13322" fg:w="26"/><text x="99.4458%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (3 samples, 0.02%)</title><rect x="99.3671%" y="197" width="0.0223%" height="15" fill="rgb(251,123,47)" fg:x="13345" fg:w="3"/><text x="99.6171%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (13,425 samples, 99.96%)</title><rect x="0.0000%" y="229" width="99.9628%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="13425"/><text x="0.2500%" y="239.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (77 samples, 0.57%)</title><rect x="99.3894%" y="213" width="0.5733%" height="15" fill="rgb(238,131,9)" fg:x="13348" fg:w="77"/><text x="99.6394%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (13,428 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9851%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="13428"/><text x="0.2500%" y="255.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (3 samples, 0.02%)</title><rect x="99.9628%" y="229" width="0.0223%" height="15" fill="rgb(245,182,24)" fg:x="13425" fg:w="3"/><text x="100.2128%" y="239.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (13,429 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9926%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="13429"/><text x="0.2500%" y="287.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (13,429 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9926%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="13429"/><text x="0.2500%" y="271.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>all (13,430 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld`start (13,430 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>rusty-chess-bot`main (13,430 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="367.50">rusty-chess-bot`main</text></g><g><title>rusty-chess-bot`std::rt::lang_start_internal (13,430 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="351.50">rusty-chess-bot`std::rt::lang_start_internal</text></g><g><title>rusty-chess-bot`std::rt::lang_start::_{{closure}} (13,430 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="335.50">rusty-chess-bot`std::rt::lang_start::_{{closure}}</text></g><g><title>rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace (13,430 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="319.50">rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusty-chess-bot`rusty_chess_bot::main (13,430 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="13430"/><text x="0.2500%" y="303.50">rusty-chess-bot`rusty_chess_bot::main</text></g></svg></svg>