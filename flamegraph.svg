<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="1909"><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (1 samples, 0.05%)</title><rect x="0.0524%" y="229" width="0.0524%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3024%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="0.6286%" y="213" width="0.0524%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="1"/><text x="0.8786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="0.6810%" y="213" width="0.0524%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="1"/><text x="0.9310%" y="223.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (3 samples, 0.16%)</title><rect x="0.7334%" y="213" width="0.1572%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="3"/><text x="0.9834%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.47%)</title><rect x="0.9429%" y="197" width="0.4715%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="9"/><text x="1.1929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.31%)</title><rect x="1.4144%" y="197" width="0.3143%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="6"/><text x="1.6644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.16%)</title><rect x="1.7287%" y="197" width="0.1572%" height="15" fill="rgb(207,160,47)" fg:x="33" fg:w="3"/><text x="1.9787%" y="207.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="1.8858%" y="197" width="0.0524%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="1"/><text x="2.1358%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.05%)</title><rect x="1.9382%" y="197" width="0.0524%" height="15" fill="rgb(218,30,26)" fg:x="37" fg:w="1"/><text x="2.1882%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.10%)</title><rect x="2.9335%" y="181" width="0.1048%" height="15" fill="rgb(220,122,19)" fg:x="56" fg:w="2"/><text x="3.1835%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="3.0382%" y="181" width="0.0524%" height="15" fill="rgb(250,228,42)" fg:x="58" fg:w="1"/><text x="3.2882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.31%)</title><rect x="3.0906%" y="181" width="0.3143%" height="15" fill="rgb(240,193,28)" fg:x="59" fg:w="6"/><text x="3.3406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.21%)</title><rect x="4.8717%" y="165" width="0.2095%" height="15" fill="rgb(216,20,37)" fg:x="93" fg:w="4"/><text x="5.1217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.68%)</title><rect x="7.3337%" y="149" width="0.6810%" height="15" fill="rgb(206,188,39)" fg:x="140" fg:w="13"/><text x="7.5837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (99 samples, 5.19%)</title><rect x="3.4049%" y="181" width="5.1860%" height="15" fill="rgb(217,207,13)" fg:x="65" fg:w="99"/><text x="3.6549%" y="191.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (67 samples, 3.51%)</title><rect x="5.0812%" y="165" width="3.5097%" height="15" fill="rgb(231,73,38)" fg:x="97" fg:w="67"/><text x="5.3312%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.58%)</title><rect x="8.0147%" y="149" width="0.5762%" height="15" fill="rgb(225,20,46)" fg:x="153" fg:w="11"/><text x="8.2647%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.16%)</title><rect x="8.5909%" y="181" width="0.1572%" height="15" fill="rgb(210,31,41)" fg:x="164" fg:w="3"/><text x="8.8409%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.31%)</title><rect x="8.7480%" y="181" width="0.3143%" height="15" fill="rgb(221,200,47)" fg:x="167" fg:w="6"/><text x="8.9980%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 0.79%)</title><rect x="9.0623%" y="181" width="0.7858%" height="15" fill="rgb(226,26,5)" fg:x="173" fg:w="15"/><text x="9.3123%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (52 samples, 2.72%)</title><rect x="9.8481%" y="181" width="2.7239%" height="15" fill="rgb(249,33,26)" fg:x="188" fg:w="52"/><text x="10.0981%" y="191.50">ru..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (28 samples, 1.47%)</title><rect x="12.5720%" y="181" width="1.4667%" height="15" fill="rgb(235,183,28)" fg:x="240" fg:w="28"/><text x="12.8220%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (31 samples, 1.62%)</title><rect x="14.0388%" y="181" width="1.6239%" height="15" fill="rgb(221,5,38)" fg:x="268" fg:w="31"/><text x="14.2888%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.68%)</title><rect x="53.6406%" y="149" width="0.6810%" height="15" fill="rgb(247,18,42)" fg:x="1024" fg:w="13"/><text x="53.8906%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (9 samples, 0.47%)</title><rect x="54.3216%" y="149" width="0.4715%" height="15" fill="rgb(241,131,45)" fg:x="1037" fg:w="9"/><text x="54.5716%" y="159.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="54.7931%" y="149" width="0.0524%" height="15" fill="rgb(249,31,29)" fg:x="1046" fg:w="1"/><text x="55.0431%" y="159.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$realloc (3 samples, 0.16%)</title><rect x="54.8455%" y="149" width="0.1572%" height="15" fill="rgb(225,111,53)" fg:x="1047" fg:w="3"/><text x="55.0955%" y="159.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc11___rdl_alloc (5 samples, 0.26%)</title><rect x="55.0026%" y="149" width="0.2619%" height="15" fill="rgb(238,160,17)" fg:x="1050" fg:w="5"/><text x="55.2526%" y="159.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc13___rdl_realloc (4 samples, 0.21%)</title><rect x="55.2645%" y="149" width="0.2095%" height="15" fill="rgb(214,148,48)" fg:x="1055" fg:w="4"/><text x="55.5145%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.21%)</title><rect x="56.2074%" y="133" width="0.2095%" height="15" fill="rgb(232,36,49)" fg:x="1073" fg:w="4"/><text x="56.4574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.16%)</title><rect x="62.1268%" y="101" width="0.1572%" height="15" fill="rgb(209,103,24)" fg:x="1186" fg:w="3"/><text x="62.3768%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="62.2839%" y="101" width="0.1048%" height="15" fill="rgb(229,88,8)" fg:x="1189" fg:w="2"/><text x="62.5339%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 1.47%)</title><rect x="62.3887%" y="101" width="1.4667%" height="15" fill="rgb(213,181,19)" fg:x="1191" fg:w="28"/><text x="62.6387%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.16%)</title><rect x="64.2745%" y="85" width="0.1572%" height="15" fill="rgb(254,191,54)" fg:x="1227" fg:w="3"/><text x="64.5245%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 2.10%)</title><rect x="64.4316%" y="85" width="2.0953%" height="15" fill="rgb(241,83,37)" fg:x="1230" fg:w="40"/><text x="64.6816%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.94%)</title><rect x="66.5270%" y="85" width="0.9429%" height="15" fill="rgb(233,36,39)" fg:x="1270" fg:w="18"/><text x="66.7770%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (10 samples, 0.52%)</title><rect x="67.7842%" y="69" width="0.5238%" height="15" fill="rgb(226,3,54)" fg:x="1294" fg:w="10"/><text x="68.0342%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.26%)</title><rect x="68.3080%" y="69" width="0.2619%" height="15" fill="rgb(245,192,40)" fg:x="1304" fg:w="5"/><text x="68.5580%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.16%)</title><rect x="69.4605%" y="53" width="0.1572%" height="15" fill="rgb(238,167,29)" fg:x="1326" fg:w="3"/><text x="69.7105%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.63%)</title><rect x="69.6176%" y="53" width="0.6286%" height="15" fill="rgb(232,182,51)" fg:x="1329" fg:w="12"/><text x="69.8676%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (6 samples, 0.31%)</title><rect x="71.2415%" y="37" width="0.3143%" height="15" fill="rgb(231,60,39)" fg:x="1360" fg:w="6"/><text x="71.4915%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (82 samples, 4.30%)</title><rect x="67.4699%" y="85" width="4.2954%" height="15" fill="rgb(208,69,12)" fg:x="1288" fg:w="82"/><text x="67.7199%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (61 samples, 3.20%)</title><rect x="68.5699%" y="69" width="3.1954%" height="15" fill="rgb(235,93,37)" fg:x="1309" fg:w="61"/><text x="68.8199%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 1.52%)</title><rect x="70.2462%" y="53" width="1.5191%" height="15" fill="rgb(213,116,39)" fg:x="1341" fg:w="29"/><text x="70.4962%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.21%)</title><rect x="71.5558%" y="37" width="0.2095%" height="15" fill="rgb(222,207,29)" fg:x="1366" fg:w="4"/><text x="71.8058%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.16%)</title><rect x="71.7653%" y="85" width="0.1572%" height="15" fill="rgb(206,96,30)" fg:x="1370" fg:w="3"/><text x="72.0153%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.10%)</title><rect x="71.9225%" y="85" width="0.1048%" height="15" fill="rgb(218,138,4)" fg:x="1373" fg:w="2"/><text x="72.1725%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (157 samples, 8.22%)</title><rect x="63.8554%" y="101" width="8.2242%" height="15" fill="rgb(250,191,14)" fg:x="1219" fg:w="157"/><text x="64.1054%" y="111.50">libsystem_m..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="72.0272%" y="85" width="0.0524%" height="15" fill="rgb(239,60,40)" fg:x="1375" fg:w="1"/><text x="72.2772%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (3 samples, 0.16%)</title><rect x="72.0796%" y="101" width="0.1572%" height="15" fill="rgb(206,27,48)" fg:x="1376" fg:w="3"/><text x="72.3296%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="72.2368%" y="101" width="0.0524%" height="15" fill="rgb(225,35,8)" fg:x="1379" fg:w="1"/><text x="72.4868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="72.8130%" y="85" width="0.0524%" height="15" fill="rgb(250,213,24)" fg:x="1390" fg:w="1"/><text x="73.0630%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.47%)</title><rect x="72.8654%" y="85" width="0.4715%" height="15" fill="rgb(247,123,22)" fg:x="1391" fg:w="9"/><text x="73.1154%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.21%)</title><rect x="73.1273%" y="69" width="0.2095%" height="15" fill="rgb(231,138,38)" fg:x="1396" fg:w="4"/><text x="73.3773%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="73.2844%" y="53" width="0.0524%" height="15" fill="rgb(231,145,46)" fg:x="1399" fg:w="1"/><text x="73.5344%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.79%)</title><rect x="73.3368%" y="85" width="0.7858%" height="15" fill="rgb(251,118,11)" fg:x="1400" fg:w="15"/><text x="73.5868%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.10%)</title><rect x="74.1226%" y="85" width="0.1048%" height="15" fill="rgb(217,147,25)" fg:x="1415" fg:w="2"/><text x="74.3726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="74.1750%" y="69" width="0.0524%" height="15" fill="rgb(247,81,37)" fg:x="1416" fg:w="1"/><text x="74.4250%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 1.00%)</title><rect x="74.2273%" y="85" width="0.9953%" height="15" fill="rgb(209,12,38)" fg:x="1417" fg:w="19"/><text x="74.4773%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.94%)</title><rect x="74.2797%" y="69" width="0.9429%" height="15" fill="rgb(227,1,9)" fg:x="1418" fg:w="18"/><text x="74.5297%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.10%)</title><rect x="76.4798%" y="69" width="0.1048%" height="15" fill="rgb(248,47,43)" fg:x="1460" fg:w="2"/><text x="76.7298%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.37%)</title><rect x="76.5846%" y="69" width="0.3667%" height="15" fill="rgb(221,10,30)" fg:x="1462" fg:w="7"/><text x="76.8346%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (46 samples, 2.41%)</title><rect x="75.2226%" y="85" width="2.4096%" height="15" fill="rgb(210,229,1)" fg:x="1436" fg:w="46"/><text x="75.4726%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.68%)</title><rect x="76.9513%" y="69" width="0.6810%" height="15" fill="rgb(222,148,37)" fg:x="1469" fg:w="13"/><text x="77.2013%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (103 samples, 5.40%)</title><rect x="72.2892%" y="101" width="5.3955%" height="15" fill="rgb(234,67,33)" fg:x="1380" fg:w="103"/><text x="72.5392%" y="111.50">libsyst..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="77.6323%" y="85" width="0.0524%" height="15" fill="rgb(247,98,35)" fg:x="1482" fg:w="1"/><text x="77.8823%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="77.6847%" y="101" width="0.0524%" height="15" fill="rgb(247,138,52)" fg:x="1483" fg:w="1"/><text x="77.9347%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.05%)</title><rect x="77.7370%" y="101" width="0.0524%" height="15" fill="rgb(213,79,30)" fg:x="1484" fg:w="1"/><text x="77.9870%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (355 samples, 18.60%)</title><rect x="59.6124%" y="117" width="18.5961%" height="15" fill="rgb(246,177,23)" fg:x="1138" fg:w="355"/><text x="59.8624%" y="127.50">libsystem_malloc.dylib`_mallo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.42%)</title><rect x="77.7894%" y="101" width="0.4191%" height="15" fill="rgb(230,62,27)" fg:x="1485" fg:w="8"/><text x="78.0394%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.68%)</title><rect x="78.2085%" y="117" width="0.6810%" height="15" fill="rgb(216,154,8)" fg:x="1493" fg:w="13"/><text x="78.4585%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.26%)</title><rect x="78.8895%" y="117" width="0.2619%" height="15" fill="rgb(244,35,45)" fg:x="1506" fg:w="5"/><text x="79.1395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (447 samples, 23.42%)</title><rect x="56.4170%" y="133" width="23.4154%" height="15" fill="rgb(251,115,12)" fg:x="1077" fg:w="447"/><text x="56.6670%" y="143.50">libsystem_malloc.dylib`_realloc</text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.68%)</title><rect x="79.1514%" y="117" width="0.6810%" height="15" fill="rgb(240,54,50)" fg:x="1511" fg:w="13"/><text x="79.4014%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.58%)</title><rect x="79.2562%" y="101" width="0.5762%" height="15" fill="rgb(233,84,52)" fg:x="1513" fg:w="11"/><text x="79.5062%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (21 samples, 1.10%)</title><rect x="79.8324%" y="133" width="1.1001%" height="15" fill="rgb(207,117,47)" fg:x="1524" fg:w="21"/><text x="80.0824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 1.15%)</title><rect x="80.9324%" y="133" width="1.1524%" height="15" fill="rgb(249,43,39)" fg:x="1545" fg:w="22"/><text x="81.1824%" y="143.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (566 samples, 29.65%)</title><rect x="52.4882%" y="165" width="29.6490%" height="15" fill="rgb(209,38,44)" fg:x="1002" fg:w="566"/><text x="52.7382%" y="175.50">rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::gro..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (509 samples, 26.66%)</title><rect x="55.4741%" y="149" width="26.6632%" height="15" fill="rgb(236,212,23)" fg:x="1059" fg:w="509"/><text x="55.7241%" y="159.50">rusty-chess-bot`alloc::raw_vec::finish_grow</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="82.0849%" y="133" width="0.0524%" height="15" fill="rgb(242,79,21)" fg:x="1567" fg:w="1"/><text x="82.3349%" y="143.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (1,540 samples, 80.67%)</title><rect x="1.9906%" y="197" width="80.6705%" height="15" fill="rgb(211,96,35)" fg:x="38" fg:w="1540"/><text x="2.2406%" y="207.50">rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}}</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (1,279 samples, 67.00%)</title><rect x="15.6627%" y="181" width="66.9984%" height="15" fill="rgb(253,215,40)" fg:x="299" fg:w="1279"/><text x="15.9127%" y="191.50">rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (10 samples, 0.52%)</title><rect x="82.1372%" y="165" width="0.5238%" height="15" fill="rgb(211,81,21)" fg:x="1568" fg:w="10"/><text x="82.3872%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (4 samples, 0.21%)</title><rect x="82.6611%" y="197" width="0.2095%" height="15" fill="rgb(208,190,38)" fg:x="1578" fg:w="4"/><text x="82.9111%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (1 samples, 0.05%)</title><rect x="82.8706%" y="197" width="0.0524%" height="15" fill="rgb(235,213,38)" fg:x="1582" fg:w="1"/><text x="83.1206%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (1 samples, 0.05%)</title><rect x="82.9230%" y="197" width="0.0524%" height="15" fill="rgb(237,122,38)" fg:x="1583" fg:w="1"/><text x="83.1730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.10%)</title><rect x="85.2803%" y="165" width="0.1048%" height="15" fill="rgb(244,218,35)" fg:x="1628" fg:w="2"/><text x="85.5303%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="85.4898%" y="101" width="0.0524%" height="15" fill="rgb(240,68,47)" fg:x="1632" fg:w="1"/><text x="85.7398%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="85.5422%" y="101" width="0.0524%" height="15" fill="rgb(210,16,53)" fg:x="1633" fg:w="1"/><text x="85.7922%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.16%)</title><rect x="85.5946%" y="69" width="0.1572%" height="15" fill="rgb(235,124,12)" fg:x="1634" fg:w="3"/><text x="85.8446%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.21%)</title><rect x="85.5946%" y="101" width="0.2095%" height="15" fill="rgb(224,169,11)" fg:x="1634" fg:w="4"/><text x="85.8446%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.21%)</title><rect x="85.5946%" y="85" width="0.2095%" height="15" fill="rgb(250,166,2)" fg:x="1634" fg:w="4"/><text x="85.8446%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="85.7517%" y="69" width="0.0524%" height="15" fill="rgb(242,216,29)" fg:x="1637" fg:w="1"/><text x="86.0017%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.37%)</title><rect x="85.4898%" y="117" width="0.3667%" height="15" fill="rgb(230,116,27)" fg:x="1632" fg:w="7"/><text x="85.7398%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="85.8041%" y="101" width="0.0524%" height="15" fill="rgb(228,99,48)" fg:x="1638" fg:w="1"/><text x="86.0541%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.05%)</title><rect x="85.8565%" y="101" width="0.0524%" height="15" fill="rgb(253,11,6)" fg:x="1639" fg:w="1"/><text x="86.1065%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="85.9089%" y="101" width="0.0524%" height="15" fill="rgb(247,143,39)" fg:x="1640" fg:w="1"/><text x="86.1589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.05%)</title><rect x="85.9089%" y="85" width="0.0524%" height="15" fill="rgb(236,97,10)" fg:x="1640" fg:w="1"/><text x="86.1589%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (13 samples, 0.68%)</title><rect x="85.3850%" y="149" width="0.6810%" height="15" fill="rgb(233,208,19)" fg:x="1630" fg:w="13"/><text x="85.6350%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.63%)</title><rect x="85.4374%" y="133" width="0.6286%" height="15" fill="rgb(216,164,2)" fg:x="1631" fg:w="12"/><text x="85.6874%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.21%)</title><rect x="85.8565%" y="117" width="0.2095%" height="15" fill="rgb(220,129,5)" fg:x="1639" fg:w="4"/><text x="86.1065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.10%)</title><rect x="85.9612%" y="101" width="0.1048%" height="15" fill="rgb(242,17,10)" fg:x="1641" fg:w="2"/><text x="86.2112%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.10%)</title><rect x="85.9612%" y="85" width="0.1048%" height="15" fill="rgb(242,107,0)" fg:x="1641" fg:w="2"/><text x="86.2112%" y="95.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (60 samples, 3.14%)</title><rect x="82.9754%" y="197" width="3.1430%" height="15" fill="rgb(251,28,31)" fg:x="1584" fg:w="60"/><text x="83.2254%" y="207.50">rus..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (17 samples, 0.89%)</title><rect x="85.2279%" y="181" width="0.8905%" height="15" fill="rgb(233,223,10)" fg:x="1627" fg:w="17"/><text x="85.4779%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (14 samples, 0.73%)</title><rect x="85.3850%" y="165" width="0.7334%" height="15" fill="rgb(215,21,27)" fg:x="1630" fg:w="14"/><text x="85.6350%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.05%)</title><rect x="86.0660%" y="149" width="0.0524%" height="15" fill="rgb(232,23,21)" fg:x="1643" fg:w="1"/><text x="86.3160%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (1,692 samples, 88.63%)</title><rect x="0.1048%" y="229" width="88.6328%" height="15" fill="rgb(244,5,23)" fg:x="2" fg:w="1692"/><text x="0.3548%" y="239.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (1,677 samples, 87.85%)</title><rect x="0.8905%" y="213" width="87.8470%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1677"/><text x="1.1405%" y="223.50">rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (50 samples, 2.62%)</title><rect x="86.1184%" y="197" width="2.6192%" height="15" fill="rgb(247,70,30)" fg:x="1644" fg:w="50"/><text x="86.3684%" y="207.50">ru..</text></g><g><title>rusty-chess-bot`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="88.7376%" y="213" width="0.0524%" height="15" fill="rgb(212,68,19)" fg:x="1694" fg:w="1"/><text x="88.9876%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="88.9471%" y="197" width="0.0524%" height="15" fill="rgb(240,187,13)" fg:x="1698" fg:w="1"/><text x="89.1971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="88.9471%" y="181" width="0.0524%" height="15" fill="rgb(223,113,26)" fg:x="1698" fg:w="1"/><text x="89.1971%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="88.9995%" y="197" width="0.0524%" height="15" fill="rgb(206,192,2)" fg:x="1699" fg:w="1"/><text x="89.2495%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.10%)</title><rect x="89.0519%" y="197" width="0.1048%" height="15" fill="rgb(241,108,4)" fg:x="1700" fg:w="2"/><text x="89.3019%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (4 samples, 0.21%)</title><rect x="89.1566%" y="197" width="0.2095%" height="15" fill="rgb(247,173,49)" fg:x="1702" fg:w="4"/><text x="89.4066%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (2 samples, 0.10%)</title><rect x="89.3662%" y="197" width="0.1048%" height="15" fill="rgb(224,114,35)" fg:x="1706" fg:w="2"/><text x="89.6162%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (3 samples, 0.16%)</title><rect x="89.4709%" y="197" width="0.1572%" height="15" fill="rgb(245,159,27)" fg:x="1708" fg:w="3"/><text x="89.7209%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.21%)</title><rect x="92.9806%" y="165" width="0.2095%" height="15" fill="rgb(245,172,44)" fg:x="1775" fg:w="4"/><text x="93.2306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="93.7140%" y="117" width="0.1048%" height="15" fill="rgb(236,23,11)" fg:x="1789" fg:w="2"/><text x="93.9640%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.16%)</title><rect x="93.8188%" y="117" width="0.1572%" height="15" fill="rgb(205,117,38)" fg:x="1791" fg:w="3"/><text x="94.0688%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.21%)</title><rect x="94.0283%" y="101" width="0.2095%" height="15" fill="rgb(237,72,25)" fg:x="1795" fg:w="4"/><text x="94.2783%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="94.2378%" y="101" width="0.0524%" height="15" fill="rgb(244,70,9)" fg:x="1799" fg:w="1"/><text x="94.4878%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.05%)</title><rect x="94.2902%" y="85" width="0.0524%" height="15" fill="rgb(217,125,39)" fg:x="1800" fg:w="1"/><text x="94.5402%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="94.3426%" y="69" width="0.0524%" height="15" fill="rgb(235,36,10)" fg:x="1801" fg:w="1"/><text x="94.5926%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.31%)</title><rect x="94.2902%" y="101" width="0.3143%" height="15" fill="rgb(251,123,47)" fg:x="1800" fg:w="6"/><text x="94.5402%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.26%)</title><rect x="94.3426%" y="85" width="0.2619%" height="15" fill="rgb(221,13,13)" fg:x="1801" fg:w="5"/><text x="94.5926%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.21%)</title><rect x="94.3950%" y="69" width="0.2095%" height="15" fill="rgb(238,131,9)" fg:x="1802" fg:w="4"/><text x="94.6450%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="94.5521%" y="53" width="0.0524%" height="15" fill="rgb(211,50,8)" fg:x="1805" fg:w="1"/><text x="94.8021%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="94.6045%" y="101" width="0.0524%" height="15" fill="rgb(245,182,24)" fg:x="1806" fg:w="1"/><text x="94.8545%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.73%)</title><rect x="93.9759%" y="117" width="0.7334%" height="15" fill="rgb(242,14,37)" fg:x="1794" fg:w="14"/><text x="94.2259%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="94.6569%" y="101" width="0.0524%" height="15" fill="rgb(246,228,12)" fg:x="1807" fg:w="1"/><text x="94.9069%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="94.7093%" y="101" width="0.0524%" height="15" fill="rgb(213,55,15)" fg:x="1808" fg:w="1"/><text x="94.9593%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.10%)</title><rect x="94.7617%" y="101" width="0.1048%" height="15" fill="rgb(209,9,3)" fg:x="1809" fg:w="2"/><text x="95.0117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.05%)</title><rect x="94.8140%" y="85" width="0.0524%" height="15" fill="rgb(230,59,30)" fg:x="1810" fg:w="1"/><text x="95.0640%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="94.9712%" y="85" width="0.0524%" height="15" fill="rgb(209,121,21)" fg:x="1813" fg:w="1"/><text x="95.2212%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (32 samples, 1.68%)</title><rect x="93.4521%" y="133" width="1.6763%" height="15" fill="rgb(220,109,13)" fg:x="1784" fg:w="32"/><text x="93.7021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.42%)</title><rect x="94.7093%" y="117" width="0.4191%" height="15" fill="rgb(232,18,1)" fg:x="1808" fg:w="8"/><text x="94.9593%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 0.26%)</title><rect x="94.8664%" y="101" width="0.2619%" height="15" fill="rgb(215,41,42)" fg:x="1811" fg:w="5"/><text x="95.1164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.10%)</title><rect x="95.0236%" y="85" width="0.1048%" height="15" fill="rgb(224,123,36)" fg:x="1814" fg:w="2"/><text x="95.2736%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="95.1283%" y="133" width="0.0524%" height="15" fill="rgb(240,125,3)" fg:x="1816" fg:w="1"/><text x="95.3783%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (39 samples, 2.04%)</title><rect x="93.1902%" y="149" width="2.0430%" height="15" fill="rgb(205,98,50)" fg:x="1779" fg:w="39"/><text x="93.4402%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.05%)</title><rect x="95.1807%" y="133" width="0.0524%" height="15" fill="rgb(205,185,37)" fg:x="1817" fg:w="1"/><text x="95.4307%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.05%)</title><rect x="95.1807%" y="117" width="0.0524%" height="15" fill="rgb(238,207,15)" fg:x="1817" fg:w="1"/><text x="95.4307%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.05%)</title><rect x="95.2331%" y="149" width="0.0524%" height="15" fill="rgb(213,199,42)" fg:x="1818" fg:w="1"/><text x="95.4831%" y="159.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (126 samples, 6.60%)</title><rect x="88.7899%" y="213" width="6.6003%" height="15" fill="rgb(235,201,11)" fg:x="1695" fg:w="126"/><text x="89.0399%" y="223.50">rusty-che..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (110 samples, 5.76%)</title><rect x="89.6281%" y="197" width="5.7622%" height="15" fill="rgb(207,46,11)" fg:x="1711" fg:w="110"/><text x="89.8781%" y="207.50">rusty-c..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (46 samples, 2.41%)</title><rect x="92.9806%" y="181" width="2.4096%" height="15" fill="rgb(241,35,35)" fg:x="1775" fg:w="46"/><text x="93.2306%" y="191.50">ru..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (42 samples, 2.20%)</title><rect x="93.1902%" y="165" width="2.2001%" height="15" fill="rgb(243,32,47)" fg:x="1779" fg:w="42"/><text x="93.4402%" y="175.50">r..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.10%)</title><rect x="95.2855%" y="149" width="0.1048%" height="15" fill="rgb(247,202,23)" fg:x="1819" fg:w="2"/><text x="95.5355%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (1 samples, 0.05%)</title><rect x="95.3903%" y="213" width="0.0524%" height="15" fill="rgb(219,102,11)" fg:x="1821" fg:w="1"/><text x="95.6403%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (1 samples, 0.05%)</title><rect x="95.4426%" y="213" width="0.0524%" height="15" fill="rgb(243,110,44)" fg:x="1822" fg:w="1"/><text x="95.6926%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="95.8617%" y="165" width="0.0524%" height="15" fill="rgb(222,74,54)" fg:x="1830" fg:w="1"/><text x="96.1117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="95.8617%" y="149" width="0.0524%" height="15" fill="rgb(216,99,12)" fg:x="1830" fg:w="1"/><text x="96.1117%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.05%)</title><rect x="95.8617%" y="133" width="0.0524%" height="15" fill="rgb(226,22,26)" fg:x="1830" fg:w="1"/><text x="96.1117%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.05%)</title><rect x="95.8617%" y="117" width="0.0524%" height="15" fill="rgb(217,163,10)" fg:x="1830" fg:w="1"/><text x="96.1117%" y="127.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (10 samples, 0.52%)</title><rect x="95.4950%" y="213" width="0.5238%" height="15" fill="rgb(213,25,53)" fg:x="1823" fg:w="10"/><text x="95.7450%" y="223.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.16%)</title><rect x="95.8617%" y="197" width="0.1572%" height="15" fill="rgb(252,105,26)" fg:x="1830" fg:w="3"/><text x="96.1117%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (3 samples, 0.16%)</title><rect x="95.8617%" y="181" width="0.1572%" height="15" fill="rgb(220,39,43)" fg:x="1830" fg:w="3"/><text x="96.1117%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.10%)</title><rect x="95.9141%" y="165" width="0.1048%" height="15" fill="rgb(229,68,48)" fg:x="1831" fg:w="2"/><text x="96.1641%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (148 samples, 7.75%)</title><rect x="88.7376%" y="229" width="7.7528%" height="15" fill="rgb(252,8,32)" fg:x="1694" fg:w="148"/><text x="88.9876%" y="239.50">rusty-chess..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (9 samples, 0.47%)</title><rect x="96.0189%" y="213" width="0.4715%" height="15" fill="rgb(223,20,43)" fg:x="1833" fg:w="9"/><text x="96.2689%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (1,887 samples, 98.85%)</title><rect x="0.0000%" y="245" width="98.8476%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="1887"/><text x="0.2500%" y="255.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (45 samples, 2.36%)</title><rect x="96.4903%" y="229" width="2.3573%" height="15" fill="rgb(236,28,36)" fg:x="1842" fg:w="45"/><text x="96.7403%" y="239.50">r..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="98.8476%" y="213" width="0.0524%" height="15" fill="rgb(249,185,26)" fg:x="1887" fg:w="1"/><text x="99.0976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="98.8476%" y="197" width="0.0524%" height="15" fill="rgb(249,174,33)" fg:x="1887" fg:w="1"/><text x="99.0976%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="98.8999%" y="213" width="0.0524%" height="15" fill="rgb(233,201,37)" fg:x="1888" fg:w="1"/><text x="99.1499%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.10%)</title><rect x="99.2666%" y="149" width="0.1048%" height="15" fill="rgb(221,78,26)" fg:x="1895" fg:w="2"/><text x="99.5166%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.10%)</title><rect x="99.2666%" y="133" width="0.1048%" height="15" fill="rgb(250,127,30)" fg:x="1895" fg:w="2"/><text x="99.5166%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="99.3190%" y="117" width="0.0524%" height="15" fill="rgb(230,49,44)" fg:x="1896" fg:w="1"/><text x="99.5690%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="99.3190%" y="101" width="0.0524%" height="15" fill="rgb(229,67,23)" fg:x="1896" fg:w="1"/><text x="99.5690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="99.3190%" y="85" width="0.0524%" height="15" fill="rgb(249,83,47)" fg:x="1896" fg:w="1"/><text x="99.5690%" y="95.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (11 samples, 0.58%)</title><rect x="98.8476%" y="229" width="0.5762%" height="15" fill="rgb(215,43,3)" fg:x="1887" fg:w="11"/><text x="99.0976%" y="239.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (9 samples, 0.47%)</title><rect x="98.9523%" y="213" width="0.4715%" height="15" fill="rgb(238,154,13)" fg:x="1889" fg:w="9"/><text x="99.2023%" y="223.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.21%)</title><rect x="99.2142%" y="197" width="0.2095%" height="15" fill="rgb(219,56,2)" fg:x="1894" fg:w="4"/><text x="99.4642%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (4 samples, 0.21%)</title><rect x="99.2142%" y="181" width="0.2095%" height="15" fill="rgb(233,0,4)" fg:x="1894" fg:w="4"/><text x="99.4642%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.21%)</title><rect x="99.2142%" y="165" width="0.2095%" height="15" fill="rgb(235,30,7)" fg:x="1894" fg:w="4"/><text x="99.4642%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="99.3714%" y="149" width="0.0524%" height="15" fill="rgb(250,79,13)" fg:x="1897" fg:w="1"/><text x="99.6214%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (12 samples, 0.63%)</title><rect x="98.8476%" y="245" width="0.6286%" height="15" fill="rgb(211,146,34)" fg:x="1887" fg:w="12"/><text x="99.0976%" y="255.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (1 samples, 0.05%)</title><rect x="99.4238%" y="229" width="0.0524%" height="15" fill="rgb(228,22,38)" fg:x="1898" fg:w="1"/><text x="99.6738%" y="239.50"></text></g><g><title>dyld`start (1,908 samples, 99.95%)</title><rect x="0.0000%" y="389" width="99.9476%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rusty-chess-bot`main (1,908 samples, 99.95%)</title><rect x="0.0000%" y="373" width="99.9476%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="383.50">rusty-chess-bot`main</text></g><g><title>rusty-chess-bot`std::rt::lang_start_internal (1,908 samples, 99.95%)</title><rect x="0.0000%" y="357" width="99.9476%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="367.50">rusty-chess-bot`std::rt::lang_start_internal</text></g><g><title>rusty-chess-bot`std::rt::lang_start::_{{closure}} (1,908 samples, 99.95%)</title><rect x="0.0000%" y="341" width="99.9476%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="351.50">rusty-chess-bot`std::rt::lang_start::_{{closure}}</text></g><g><title>rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace (1,908 samples, 99.95%)</title><rect x="0.0000%" y="325" width="99.9476%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="335.50">rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusty-chess-bot`rusty_chess_bot::main (1,908 samples, 99.95%)</title><rect x="0.0000%" y="309" width="99.9476%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="319.50">rusty-chess-bot`rusty_chess_bot::main</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft_divide (1,908 samples, 99.95%)</title><rect x="0.0000%" y="293" width="99.9476%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="303.50">rusty-chess-bot`rusty_chess_bot::debug::perft_divide</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (1,908 samples, 99.95%)</title><rect x="0.0000%" y="277" width="99.9476%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="287.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (1,908 samples, 99.95%)</title><rect x="0.0000%" y="261" width="99.9476%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="1908"/><text x="0.2500%" y="271.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (9 samples, 0.47%)</title><rect x="99.4762%" y="245" width="0.4715%" height="15" fill="rgb(237,53,32)" fg:x="1899" fg:w="9"/><text x="99.7262%" y="255.50"></text></g><g><title>all (1,909 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="1909"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.05%)</title><rect x="99.9476%" y="389" width="0.0524%" height="15" fill="rgb(210,40,34)" fg:x="1908" fg:w="1"/><text x="100.1976%" y="399.50"></text></g></svg></svg>