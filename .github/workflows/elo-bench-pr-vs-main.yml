name: ELO Benchmark between PR and master
on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-both-and-benchmark:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout PR (current)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: pr

      - name: Fetch master (shallow)
        working-directory: pr
        run: |
          git fetch origin master --depth=1

      - name: Prepare worktree for master
        working-directory: pr
        run: |
          # Worktree für master neben das PR-Repo legen
          git worktree add -f ../master origin/master
          git worktree list

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo (PR)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            pr/target
          key: cargo-${{ runner.os }}-pr-${{ hashFiles('pr/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-pr-

      - name: Build PR (current) and place binary in ./testing/current
        working-directory: pr
        run: |
          cargo build --locked --release
          mkdir -p testing
          cp target/release/thunfisch testing/current
          chmod +x testing/current

      - name: Cache cargo (master)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            master/target
          key: cargo-${{ runner.os }}-master-${{ hashFiles('master/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-master-

      - name: Build master (previous) and place binary in ./testing/previous (inside PR repo)
        working-directory: master
        run: |
          cargo build --locked --release
          mkdir -p ../pr/testing
          cp target/release/thunfisch ../pr/testing/previous
          chmod +x ../pr/testing/previous

      - name: Install fastchess
        run: |
          cd /tmp
          wget https://github.com/Disservin/fastchess/releases/download/v1.6.0-alpha/fastchess-linux-x86-64.tar
          tar -xf fastchess-linux-x86-64.tar
          echo fastchess-linux-x86-64 >> $env:GITHUB_PATH
          fastchess -version

      - name: Run benchmark script from PR repo
        working-directory: pr
        run: |
          fastchess \
          -engine cmd=./current \
          name=current \
          -engine cmd=./previous \
          name=previous \
          -each proto=uci \
          -each tc=0/0:30+1 \
          -rounds 1 \
          -concurrency 4 \
          -openings file=8moves_v3.pgn format=pgn order=random \
          > benchmark_summary.txt 2>&1

      - name: Prepare benchmark comment
        id: prepare-comment
        # This step only runs for pull requests
        if: github.event_name == 'pull_request'
        working-directory: pr
        run: |
          {
            echo "comment_body<<EOF"
            echo "### ♟️ ELO Benchmark Results"
            echo "\`\`\`"
            tail -n 5 benchmark_summary.txt
            echo "\`\`\`"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post benchmark results to PR
        # This step only runs for pull requests
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comment_body = `${{ steps.prepare-comment.outputs.comment_body }}`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment_body
            });