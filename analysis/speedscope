<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="12854"><g><title>libsystem_malloc.dylib`_free (4 samples, 0.03%)</title><rect x="0.0934%" y="213" width="0.0311%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="4"/><text x="0.3434%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.02%)</title><rect x="0.1323%" y="213" width="0.0156%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="2"/><text x="0.3823%" y="223.50"></text></g><g><title>rusty-chess-bot`_RNvCs6vCWlQ8W2h7_7___rustc13___rdl_dealloc (3 samples, 0.02%)</title><rect x="0.1556%" y="213" width="0.0233%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="3"/><text x="0.4056%" y="223.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (3 samples, 0.02%)</title><rect x="0.1789%" y="213" width="0.0233%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="3"/><text x="0.4289%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.07%)</title><rect x="2.0305%" y="197" width="0.0700%" height="15" fill="rgb(208,68,35)" fg:x="261" fg:w="9"/><text x="2.2805%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (28 samples, 0.22%)</title><rect x="2.1005%" y="197" width="0.2178%" height="15" fill="rgb(232,128,0)" fg:x="270" fg:w="28"/><text x="2.3505%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (2 samples, 0.02%)</title><rect x="2.3183%" y="197" width="0.0156%" height="15" fill="rgb(207,160,47)" fg:x="298" fg:w="2"/><text x="2.5683%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.02%)</title><rect x="2.7229%" y="181" width="0.0156%" height="15" fill="rgb(228,23,34)" fg:x="350" fg:w="2"/><text x="2.9729%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (1,237 samples, 9.62%)</title><rect x="5.2668%" y="165" width="9.6235%" height="15" fill="rgb(218,30,26)" fg:x="677" fg:w="1237"/><text x="5.5168%" y="175.50">rusty-chess-bo..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (1,120 samples, 8.71%)</title><rect x="14.8903%" y="165" width="8.7132%" height="15" fill="rgb(220,122,19)" fg:x="1914" fg:w="1120"/><text x="15.1403%" y="175.50">rusty-chess-..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (759 samples, 5.90%)</title><rect x="23.6035%" y="165" width="5.9048%" height="15" fill="rgb(250,228,42)" fg:x="3034" fg:w="759"/><text x="23.8535%" y="175.50">rusty-ch..</text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (8,337 samples, 64.86%)</title><rect x="2.7384%" y="181" width="64.8592%" height="15" fill="rgb(240,193,28)" fg:x="352" fg:w="8337"/><text x="2.9884%" y="191.50">rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}}</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (4,896 samples, 38.09%)</title><rect x="29.5083%" y="165" width="38.0893%" height="15" fill="rgb(216,20,37)" fg:x="3793" fg:w="4896"/><text x="29.7583%" y="175.50">rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation:..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (43 samples, 0.33%)</title><rect x="67.5976%" y="181" width="0.3345%" height="15" fill="rgb(206,188,39)" fg:x="8689" fg:w="43"/><text x="67.8476%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (40 samples, 0.31%)</title><rect x="67.9322%" y="181" width="0.3112%" height="15" fill="rgb(217,207,13)" fg:x="8732" fg:w="40"/><text x="68.1822%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (11 samples, 0.09%)</title><rect x="68.2433%" y="181" width="0.0856%" height="15" fill="rgb(231,73,38)" fg:x="8772" fg:w="11"/><text x="68.4933%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (154 samples, 1.20%)</title><rect x="68.3289%" y="181" width="1.1981%" height="15" fill="rgb(225,20,46)" fg:x="8783" fg:w="154"/><text x="68.5789%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="73.5180%" y="149" width="0.0156%" height="15" fill="rgb(210,31,41)" fg:x="9450" fg:w="2"/><text x="73.7680%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.02%)</title><rect x="73.5335%" y="149" width="0.0156%" height="15" fill="rgb(221,200,47)" fg:x="9452" fg:w="2"/><text x="73.7835%" y="159.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$realloc (3 samples, 0.02%)</title><rect x="73.5569%" y="149" width="0.0233%" height="15" fill="rgb(226,26,5)" fg:x="9455" fg:w="3"/><text x="73.8069%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.03%)</title><rect x="73.9459%" y="101" width="0.0311%" height="15" fill="rgb(249,33,26)" fg:x="9505" fg:w="4"/><text x="74.1959%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.08%)</title><rect x="73.9848%" y="101" width="0.0778%" height="15" fill="rgb(235,183,28)" fg:x="9510" fg:w="10"/><text x="74.2348%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.13%)</title><rect x="74.0781%" y="85" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="9522" fg:w="17"/><text x="74.3281%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.08%)</title><rect x="74.2104%" y="85" width="0.0778%" height="15" fill="rgb(247,18,42)" fg:x="9539" fg:w="10"/><text x="74.4604%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="74.3037%" y="69" width="0.0156%" height="15" fill="rgb(241,131,45)" fg:x="9551" fg:w="2"/><text x="74.5537%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.05%)</title><rect x="74.3348%" y="53" width="0.0467%" height="15" fill="rgb(249,31,29)" fg:x="9555" fg:w="6"/><text x="74.5848%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.14%)</title><rect x="74.2882%" y="85" width="0.1400%" height="15" fill="rgb(225,111,53)" fg:x="9549" fg:w="18"/><text x="74.5382%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.10%)</title><rect x="74.3271%" y="69" width="0.1011%" height="15" fill="rgb(238,160,17)" fg:x="9554" fg:w="13"/><text x="74.5771%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="74.3815%" y="53" width="0.0467%" height="15" fill="rgb(214,148,48)" fg:x="9561" fg:w="6"/><text x="74.6315%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="74.4126%" y="37" width="0.0156%" height="15" fill="rgb(232,36,49)" fg:x="9565" fg:w="2"/><text x="74.6626%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (49 samples, 0.38%)</title><rect x="74.0625%" y="101" width="0.3812%" height="15" fill="rgb(209,103,24)" fg:x="9520" fg:w="49"/><text x="74.3125%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (6 samples, 0.05%)</title><rect x="74.4438%" y="101" width="0.0467%" height="15" fill="rgb(229,88,8)" fg:x="9569" fg:w="6"/><text x="74.6938%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.02%)</title><rect x="74.6305%" y="85" width="0.0233%" height="15" fill="rgb(213,181,19)" fg:x="9593" fg:w="3"/><text x="74.8805%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="74.6538%" y="85" width="0.0156%" height="15" fill="rgb(254,191,54)" fg:x="9596" fg:w="2"/><text x="74.9038%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.08%)</title><rect x="74.8716%" y="53" width="0.0778%" height="15" fill="rgb(241,83,37)" fg:x="9624" fg:w="10"/><text x="75.1216%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (39 samples, 0.30%)</title><rect x="74.6694%" y="85" width="0.3034%" height="15" fill="rgb(233,36,39)" fg:x="9598" fg:w="39"/><text x="74.9194%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.17%)</title><rect x="74.8016%" y="69" width="0.1712%" height="15" fill="rgb(226,3,54)" fg:x="9615" fg:w="22"/><text x="75.0516%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="74.9494%" y="53" width="0.0233%" height="15" fill="rgb(245,192,40)" fg:x="9634" fg:w="3"/><text x="75.1994%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="74.9728%" y="85" width="0.0233%" height="15" fill="rgb(238,167,29)" fg:x="9637" fg:w="3"/><text x="75.2228%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.10%)</title><rect x="74.9961%" y="85" width="0.1011%" height="15" fill="rgb(232,182,51)" fg:x="9640" fg:w="13"/><text x="75.2461%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.08%)</title><rect x="75.0194%" y="69" width="0.0778%" height="15" fill="rgb(231,60,39)" fg:x="9643" fg:w="10"/><text x="75.2694%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.15%)</title><rect x="75.0972%" y="85" width="0.1478%" height="15" fill="rgb(208,69,12)" fg:x="9653" fg:w="19"/><text x="75.3472%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.14%)</title><rect x="75.1050%" y="69" width="0.1400%" height="15" fill="rgb(235,93,37)" fg:x="9654" fg:w="18"/><text x="75.3550%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="75.2451%" y="85" width="0.0156%" height="15" fill="rgb(213,116,39)" fg:x="9672" fg:w="2"/><text x="75.4951%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.03%)</title><rect x="75.3618%" y="69" width="0.0311%" height="15" fill="rgb(222,207,29)" fg:x="9687" fg:w="4"/><text x="75.6118%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.04%)</title><rect x="75.3929%" y="69" width="0.0389%" height="15" fill="rgb(206,96,30)" fg:x="9691" fg:w="5"/><text x="75.6429%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (27 samples, 0.21%)</title><rect x="75.2606%" y="85" width="0.2101%" height="15" fill="rgb(218,138,4)" fg:x="9674" fg:w="27"/><text x="75.5106%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.04%)</title><rect x="75.4318%" y="69" width="0.0389%" height="15" fill="rgb(250,191,14)" fg:x="9696" fg:w="5"/><text x="75.6818%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (131 samples, 1.02%)</title><rect x="74.4982%" y="101" width="1.0191%" height="15" fill="rgb(239,60,40)" fg:x="9576" fg:w="131"/><text x="74.7482%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.05%)</title><rect x="75.4707%" y="85" width="0.0467%" height="15" fill="rgb(206,27,48)" fg:x="9701" fg:w="6"/><text x="75.7207%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.02%)</title><rect x="75.5251%" y="101" width="0.0156%" height="15" fill="rgb(225,35,8)" fg:x="9708" fg:w="2"/><text x="75.7751%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (266 samples, 2.07%)</title><rect x="73.7825%" y="117" width="2.0694%" height="15" fill="rgb(250,213,24)" fg:x="9484" fg:w="266"/><text x="74.0325%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.31%)</title><rect x="75.5407%" y="101" width="0.3112%" height="15" fill="rgb(247,123,22)" fg:x="9710" fg:w="40"/><text x="75.7907%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.06%)</title><rect x="75.8597%" y="117" width="0.0622%" height="15" fill="rgb(231,138,38)" fg:x="9751" fg:w="8"/><text x="76.1097%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.04%)</title><rect x="75.9219%" y="117" width="0.0389%" height="15" fill="rgb(231,145,46)" fg:x="9759" fg:w="5"/><text x="76.1719%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (306 samples, 2.38%)</title><rect x="73.6580%" y="133" width="2.3806%" height="15" fill="rgb(251,118,11)" fg:x="9468" fg:w="306"/><text x="73.9080%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.08%)</title><rect x="75.9608%" y="117" width="0.0778%" height="15" fill="rgb(217,147,25)" fg:x="9764" fg:w="10"/><text x="76.2108%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.07%)</title><rect x="75.9686%" y="101" width="0.0700%" height="15" fill="rgb(247,81,37)" fg:x="9765" fg:w="9"/><text x="76.2186%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.05%)</title><rect x="76.0386%" y="133" width="0.0467%" height="15" fill="rgb(209,12,38)" fg:x="9774" fg:w="6"/><text x="76.2886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.11%)</title><rect x="76.0853%" y="133" width="0.1089%" height="15" fill="rgb(227,1,9)" fg:x="9780" fg:w="14"/><text x="76.3353%" y="143.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (354 samples, 2.75%)</title><rect x="73.4557%" y="165" width="2.7540%" height="15" fill="rgb(248,47,43)" fg:x="9442" fg:w="354"/><text x="73.7057%" y="175.50">ru..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (337 samples, 2.62%)</title><rect x="73.5880%" y="149" width="2.6218%" height="15" fill="rgb(221,10,30)" fg:x="9459" fg:w="337"/><text x="73.8380%" y="159.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="76.1942%" y="133" width="0.0156%" height="15" fill="rgb(210,229,1)" fg:x="9794" fg:w="2"/><text x="76.4442%" y="143.50"></text></g><g><title>rusty-chess-bot`DYLD-STUB$$realloc (2 samples, 0.02%)</title><rect x="76.2253%" y="149" width="0.0156%" height="15" fill="rgb(222,148,37)" fg:x="9798" fg:w="2"/><text x="76.4753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="76.3342%" y="101" width="0.0156%" height="15" fill="rgb(234,67,33)" fg:x="9812" fg:w="2"/><text x="76.5842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="76.3576%" y="85" width="0.0233%" height="15" fill="rgb(247,98,35)" fg:x="9815" fg:w="3"/><text x="76.6076%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.11%)</title><rect x="76.3498%" y="101" width="0.1089%" height="15" fill="rgb(247,138,52)" fg:x="9814" fg:w="14"/><text x="76.5998%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.08%)</title><rect x="76.3809%" y="85" width="0.0778%" height="15" fill="rgb(213,79,30)" fg:x="9818" fg:w="10"/><text x="76.6309%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.05%)</title><rect x="76.4042%" y="69" width="0.0545%" height="15" fill="rgb(246,177,23)" fg:x="9821" fg:w="7"/><text x="76.6542%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="76.4354%" y="53" width="0.0233%" height="15" fill="rgb(230,62,27)" fg:x="9825" fg:w="3"/><text x="76.6854%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="76.4431%" y="37" width="0.0156%" height="15" fill="rgb(216,154,8)" fg:x="9826" fg:w="2"/><text x="76.6931%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (27 samples, 0.21%)</title><rect x="76.2953%" y="117" width="0.2101%" height="15" fill="rgb(244,35,45)" fg:x="9807" fg:w="27"/><text x="76.5453%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.04%)</title><rect x="76.4665%" y="101" width="0.0389%" height="15" fill="rgb(251,115,12)" fg:x="9829" fg:w="5"/><text x="76.7165%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (3 samples, 0.02%)</title><rect x="76.4820%" y="85" width="0.0233%" height="15" fill="rgb(240,54,50)" fg:x="9831" fg:w="3"/><text x="76.7320%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (34 samples, 0.26%)</title><rect x="76.2564%" y="133" width="0.2645%" height="15" fill="rgb(233,84,52)" fg:x="9802" fg:w="34"/><text x="76.5064%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="76.5209%" y="133" width="0.0156%" height="15" fill="rgb(207,117,47)" fg:x="9836" fg:w="2"/><text x="76.7709%" y="143.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (43 samples, 0.33%)</title><rect x="76.2097%" y="165" width="0.3345%" height="15" fill="rgb(249,43,39)" fg:x="9796" fg:w="43"/><text x="76.4597%" y="175.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (38 samples, 0.30%)</title><rect x="76.2486%" y="149" width="0.2956%" height="15" fill="rgb(209,38,44)" fg:x="9801" fg:w="38"/><text x="76.4986%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (908 samples, 7.06%)</title><rect x="69.5270%" y="181" width="7.0639%" height="15" fill="rgb(236,212,23)" fg:x="8937" fg:w="908"/><text x="69.7770%" y="191.50">rusty-che..</text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (6 samples, 0.05%)</title><rect x="76.5443%" y="165" width="0.0467%" height="15" fill="rgb(242,79,21)" fg:x="9839" fg:w="6"/><text x="76.7943%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (11,239 samples, 87.44%)</title><rect x="0.2023%" y="213" width="87.4358%" height="15" fill="rgb(211,96,35)" fg:x="26" fg:w="11239"/><text x="0.4523%" y="223.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (10,964 samples, 85.30%)</title><rect x="2.3417%" y="197" width="85.2964%" height="15" fill="rgb(253,215,40)" fg:x="301" fg:w="10964"/><text x="2.5917%" y="207.50">rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (1,420 samples, 11.05%)</title><rect x="76.5909%" y="181" width="11.0471%" height="15" fill="rgb(211,81,21)" fg:x="9845" fg:w="1420"/><text x="76.8409%" y="191.50">rusty-chess-bot`..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (92 samples, 0.72%)</title><rect x="87.7859%" y="181" width="0.7157%" height="15" fill="rgb(208,190,38)" fg:x="11284" fg:w="92"/><text x="88.0359%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (60 samples, 0.47%)</title><rect x="88.5016%" y="181" width="0.4668%" height="15" fill="rgb(235,213,38)" fg:x="11376" fg:w="60"/><text x="88.7516%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (36 samples, 0.28%)</title><rect x="88.9684%" y="181" width="0.2801%" height="15" fill="rgb(237,122,38)" fg:x="11436" fg:w="36"/><text x="89.2184%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (326 samples, 2.54%)</title><rect x="87.6770%" y="197" width="2.5362%" height="15" fill="rgb(244,218,35)" fg:x="11270" fg:w="326"/><text x="87.9270%" y="207.50">ru..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (124 samples, 0.96%)</title><rect x="89.2485%" y="181" width="0.9647%" height="15" fill="rgb(240,68,47)" fg:x="11472" fg:w="124"/><text x="89.4985%" y="191.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (6 samples, 0.05%)</title><rect x="90.2132%" y="197" width="0.0467%" height="15" fill="rgb(210,16,53)" fg:x="11596" fg:w="6"/><text x="90.4632%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_queen_positions (4 samples, 0.03%)</title><rect x="90.2598%" y="197" width="0.0311%" height="15" fill="rgb(235,124,12)" fg:x="11602" fg:w="4"/><text x="90.5098%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (9 samples, 0.07%)</title><rect x="90.2987%" y="197" width="0.0700%" height="15" fill="rgb(224,169,11)" fg:x="11607" fg:w="9"/><text x="90.5487%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.05%)</title><rect x="90.6021%" y="117" width="0.0545%" height="15" fill="rgb(250,166,2)" fg:x="11646" fg:w="7"/><text x="90.8521%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="90.6410%" y="101" width="0.0156%" height="15" fill="rgb(242,216,29)" fg:x="11651" fg:w="2"/><text x="90.8910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="90.6722%" y="101" width="0.0311%" height="15" fill="rgb(230,116,27)" fg:x="11655" fg:w="4"/><text x="90.9222%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.03%)</title><rect x="90.6722%" y="85" width="0.0311%" height="15" fill="rgb(228,99,48)" fg:x="11655" fg:w="4"/><text x="90.9222%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.06%)</title><rect x="90.6644%" y="117" width="0.0622%" height="15" fill="rgb(253,11,6)" fg:x="11654" fg:w="8"/><text x="90.9144%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.19%)</title><rect x="90.5866%" y="133" width="0.1867%" height="15" fill="rgb(247,143,39)" fg:x="11644" fg:w="24"/><text x="90.8366%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.05%)</title><rect x="90.7266%" y="117" width="0.0467%" height="15" fill="rgb(236,97,10)" fg:x="11662" fg:w="6"/><text x="90.9766%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="90.7733%" y="133" width="0.0233%" height="15" fill="rgb(233,208,19)" fg:x="11668" fg:w="3"/><text x="91.0233%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (29 samples, 0.23%)</title><rect x="90.5788%" y="149" width="0.2256%" height="15" fill="rgb(216,164,2)" fg:x="11643" fg:w="29"/><text x="90.8288%" y="159.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (57 samples, 0.44%)</title><rect x="90.3688%" y="197" width="0.4434%" height="15" fill="rgb(220,129,5)" fg:x="11616" fg:w="57"/><text x="90.6188%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (33 samples, 0.26%)</title><rect x="90.5555%" y="181" width="0.2567%" height="15" fill="rgb(242,17,10)" fg:x="11640" fg:w="33"/><text x="90.8055%" y="191.50"></text></g><g><title>rusty-chess-bot`alloc::raw_vec::finish_grow (30 samples, 0.23%)</title><rect x="90.5788%" y="165" width="0.2334%" height="15" fill="rgb(242,107,0)" fg:x="11643" fg:w="30"/><text x="90.8288%" y="175.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (487 samples, 3.79%)</title><rect x="87.6381%" y="213" width="3.7887%" height="15" fill="rgb(251,28,31)" fg:x="11265" fg:w="487"/><text x="87.8881%" y="223.50">rust..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (79 samples, 0.61%)</title><rect x="90.8122%" y="197" width="0.6146%" height="15" fill="rgb(233,223,10)" fg:x="11673" fg:w="79"/><text x="91.0622%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (12,753 samples, 99.21%)</title><rect x="0.0311%" y="229" width="99.2143%" height="15" fill="rgb(215,21,27)" fg:x="4" fg:w="12753"/><text x="0.2811%" y="239.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (1,005 samples, 7.82%)</title><rect x="91.4268%" y="213" width="7.8186%" height="15" fill="rgb(232,23,21)" fg:x="11752" fg:w="1005"/><text x="91.6768%" y="223.50">rusty-chess..</text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_bishop_positions (3 samples, 0.02%)</title><rect x="99.2454%" y="197" width="0.0233%" height="15" fill="rgb(244,5,23)" fg:x="12757" fg:w="3"/><text x="99.4954%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::position_generation::get_rook_positions (2 samples, 0.02%)</title><rect x="99.2765%" y="197" width="0.0156%" height="15" fill="rgb(226,81,46)" fg:x="12761" fg:w="2"/><text x="99.5265%" y="207.50"></text></g><g><title>rusty-chess-bot`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (16 samples, 0.12%)</title><rect x="99.2454%" y="213" width="0.1245%" height="15" fill="rgb(247,70,30)" fg:x="12757" fg:w="16"/><text x="99.4954%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_attacks (10 samples, 0.08%)</title><rect x="99.2920%" y="197" width="0.0778%" height="15" fill="rgb(212,68,19)" fg:x="12763" fg:w="10"/><text x="99.5420%" y="207.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::pseudo_legal_move_generation::get_all_moves (4 samples, 0.03%)</title><rect x="99.3698%" y="213" width="0.0311%" height="15" fill="rgb(240,187,13)" fg:x="12773" fg:w="4"/><text x="99.6198%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::legal_move_generation::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::generate_legal_moves (22 samples, 0.17%)</title><rect x="99.2454%" y="229" width="0.1712%" height="15" fill="rgb(223,113,26)" fg:x="12757" fg:w="22"/><text x="99.4954%" y="239.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (2 samples, 0.02%)</title><rect x="99.4010%" y="213" width="0.0156%" height="15" fill="rgb(206,192,2)" fg:x="12777" fg:w="2"/><text x="99.6510%" y="223.50"></text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (12,849 samples, 99.96%)</title><rect x="0.0000%" y="245" width="99.9611%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="12849"/><text x="0.2500%" y="255.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (70 samples, 0.54%)</title><rect x="99.4165%" y="229" width="0.5446%" height="15" fill="rgb(247,173,49)" fg:x="12779" fg:w="70"/><text x="99.6665%" y="239.50"></text></g><g><title>dyld`start (12,853 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9922%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rusty-chess-bot`main (12,853 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9922%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="383.50">rusty-chess-bot`main</text></g><g><title>rusty-chess-bot`std::rt::lang_start_internal (12,853 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9922%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="367.50">rusty-chess-bot`std::rt::lang_start_internal</text></g><g><title>rusty-chess-bot`std::rt::lang_start::_{{closure}} (12,853 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9922%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="351.50">rusty-chess-bot`std::rt::lang_start::_{{closure}}</text></g><g><title>rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace (12,853 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9922%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="335.50">rusty-chess-bot`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusty-chess-bot`rusty_chess_bot::main (12,853 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9922%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="319.50">rusty-chess-bot`rusty_chess_bot::main</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::perft (12,853 samples, 99.99%)</title><rect x="0.0000%" y="293" width="99.9922%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="303.50">rusty-chess-bot`rusty_chess_bot::debug::perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (12,853 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9922%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="287.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::debug::r_perft (12,853 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9922%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="12853"/><text x="0.2500%" y="271.50">rusty-chess-bot`rusty_chess_bot::debug::r_perft</text></g><g><title>rusty-chess-bot`rusty_chess_bot::types::board::make_move::_&lt;impl rusty_chess_bot::types::board::board::Board&gt;::make_move (4 samples, 0.03%)</title><rect x="99.9611%" y="245" width="0.0311%" height="15" fill="rgb(251,123,47)" fg:x="12849" fg:w="4"/><text x="100.2111%" y="255.50"></text></g><g><title>all (12,854 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="12854"/><text x="0.2500%" y="415.50"></text></g></svg></svg>